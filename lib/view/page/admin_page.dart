import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:intl/intl.dart';
import 'package:tnm_fact/controller/admin_controller.dart';
import 'package:tnm_fact/utils/app_color.dart';
import 'package:tnm_fact/utils/app_text_style.dart';
import 'package:tnm_fact/view/page/create_page.dart';
import 'package:tnm_fact/view/page/edit_page.dart';
import 'package:tnm_fact/view/widget/app_admin_top_bar.dart';
import 'package:tnm_fact/view/widget/app_post.dart';
import 'package:tnm_fact/view/widget/app_post_title.dart';

class AdminPage extends GetView<AdminController> {
  const AdminPage({super.key});
  static const String route = '/admin';

  @override
  Widget build(BuildContext context) {
    final screenWidth = ScreenUtil().screenWidth;
    final bool isExtended = screenWidth > 600; // Í∏∞Ï§Ä ÎÑàÎπÑ
    final double railWidth = isExtended ? 240.w : 72.w;
    final box = GetStorage();

    String getDisplayTitle(Map<String, dynamic> post) {
      final title = (post['title'] ?? '').toString().trim();
      final rawDate = (post['date'] ?? '').toString().trim();
      final category = (post['category'] ?? '').toString();

      // üîπ ÎÇ†Ïßú Ìè¨Îß∑ Î≥ÄÌôò ("2025-10-22 15:19" ‚Üí "25-10-22")
      String formattedDate = rawDate;
      try {
        final parsed = DateTime.tryParse(rawDate);
        if (parsed != null) {
          formattedDate = DateFormat('yy.MM.dd').format(parsed);
        }
      } catch (_) {
        // ÌååÏã± Ïã§Ìå® Ïãú ÏõêÎ≥∏ Ïú†ÏßÄ
        formattedDate = rawDate;
      }

      // üîπ Îç∞ÏùºÎ¶¨ Ìå©Ìä∏Ïù∏ Í≤ΩÏö∞
      if (category == 'Îç∞ÏùºÎ¶¨ Ìå©Ìä∏') {
        if (title.isEmpty || title == '[Ïò§ÎäòÏùò ÍµêÏú° Îâ¥Ïä§]' || title == '[Ïò§ÎäòÏùò ÍµêÏú° Îâ¥Ïä§]') {
          return '[Ïò§ÎäòÏùò ÍµêÏú° Îâ¥Ïä§] $formattedDate';
        }

        if (title.startsWith('[Ïò§ÎäòÏùò ÍµêÏú° Îâ¥Ïä§]')) {
          return title;
        }

        return '[Ïò§ÎäòÏùò ÍµêÏú° Îâ¥Ïä§] $title';
      }

      // üîπ Ïù∏ÏÇ¨Ïù¥Ìä∏ Ìå©Ìä∏ Îì± Îã§Î•∏ Ïπ¥ÌÖåÍ≥†Î¶¨
      return title.isEmpty ? formattedDate : title;
    }

    return Scaffold(
      backgroundColor: AppColor.white,
      body:

          /// Ïö∞Ï∏° ÏΩòÌÖêÏ∏† ÏòÅÏó≠
          Column(
        children: [
          /// ÏÉÅÎã® ÌÉÄÏù¥ÌãÄ
          Padding(
            padding: EdgeInsets.symmetric(vertical: 24.h, horizontal: 16.w),
            child: SizedBox(
              width: double.infinity,
              height: 70.h,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('ÏΩòÌÖêÏ∏† Í¥ÄÎ¶¨',
                          style: AppTextStyle.koBold28()
                              .copyWith(color: AppColor.black)),
                      Text('Í≤åÏãúÎ¨ºÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† ÏÉà Í∏ÄÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§.',
                          style: AppTextStyle.koSemiBold12()
                              .copyWith(color: AppColor.grey)),
                    ],
                  ),
                  Padding(
                    padding: EdgeInsets.only(right: 20.w),
                    child: Align(
                      alignment: Alignment.bottomLeft,
                      child: TextButton(
                        child: Text('Í∏∞ÏÇ¨ ÏûëÏÑ±', style: AppTextStyle.koBold13()),
                        onPressed: () {
                          controller.isCreate.value = true;
                          // Get.toNamed(CreatePage.route); // Í∏Ä ÏûëÏÑ± ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                          // Ïó¨Í∏∞Ïóê Í∏Ä ÏûëÏÑ± Î°úÏßÅ Ï∂îÍ∞Ä
                          print('Í∏Ä ÏûëÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          /// Î≥∏Î¨∏
          Expanded(
            child: Container(
              color: AppColor.lightGrey,
              padding: EdgeInsets.all(20.w),
              child: Container(
                clipBehavior: Clip.antiAlias,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(15.r),
                  color: AppColor.white,
                ),
                child: Padding(
                  padding: EdgeInsets.all(16.0.w),
                  child: Column(
                    children: [
                      /// ÏÉÅÎã® ÌÉ≠/Í≤ÄÏÉâ Î∞î
                      Obx(() {
                        return AppAdminTopBar(
                          totalCount: controller.totalCount.value,
                          publishedCount: controller.publishedCount.value,
                          pendingCount: controller.pendingCount.value,
                          selectedIndex: controller.selectedIndex.value,
                          searchController: controller.searchController,
                          onTap: () {
                            if (controller.selectedIndex == 0) {
                              controller.searchController.text.isNotEmpty
                                  ? controller.findPost()
                                  : controller.fetchAllPosts();
                            } else if (controller.selectedIndex == 1) {
                              controller.searchController.text.isNotEmpty
                                  ? controller.findPost()
                                  : controller.fetchDonePosts();
                            } else if (controller.selectedIndex == 2) {
                              controller.searchController.text.isNotEmpty
                                  ? controller.findPost()
                                  : controller.fetchNotPosts();
                            }
                          },
                          onSubmitted: (_) async {
                            controller.clearFocus(); // ‚úÖ Ìè¨Ïª§Ïä§ Ìï¥Ï†ú
                            if (controller.searchController.text
                                .trim()
                                .isNotEmpty) {
                              await controller.findPost(); // ‚úÖ ÏóîÌÑ∞ ÏûÖÎ†• Ïãú Í≤ÄÏÉâ Ïã§Ìñâ
                            } else {
                              // ‚úÖ Í≤ÄÏÉâÏñ¥Í∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÌÉ≠Ïóê ÎßûÎäî Ï†ÑÏ≤¥ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
                              if (controller.selectedIndex.value == 0) {
                                await controller.fetchAllPosts();
                              } else if (controller.selectedIndex.value == 1) {
                                await controller.fetchDonePosts();
                              } else {
                                await controller.fetchNotPosts();
                              }
                            }
                          },
                          onChanged: (value) {
                            if (value.isEmpty) {
                              if (controller.selectedIndex == 0) {
                                controller.postList.value =
                                    controller.originalPostList.toList();
                              } else if (controller.selectedIndex == 1) {
                                controller.donePostList.value =
                                    controller.originalDonePostList.toList();
                              } else {
                                controller.notPostList.value =
                                    controller.originalNotPostList.toList();
                              }
                            }
                          },
                          onTapAll: () => controller.selectTab(0),
                          onTapPublished: () => controller.selectTab(1),
                          onTapPending: () => controller.selectTab(2),
                        );
                      }),
                      SizedBox(height: 16.h),

                      /// Ìó§Îçî
                      AppPostTitle(),
                      SizedBox(height: 5.h),

                      /// Î¶¨Ïä§Ìä∏
                      Expanded(
                        child: Obx(() {
                          List<Map<String, dynamic>> visibleList;
                          switch (controller.selectedIndex.value) {
                            case 1:
                              visibleList = controller.donePostList;
                              break;
                            case 2:
                              visibleList = controller.notPostList;
                              break;
                            case 0:
                            default:
                              visibleList = controller.postList;
                              break;
                          }
                          return ListView.builder(
                            itemCount: visibleList.length,
                            itemBuilder: (context, index) {
                              final post = visibleList[index];

                              return Padding(
                                padding: EdgeInsets.symmetric(vertical: 8.h),
                                child: AppPost(
                                  title: getDisplayTitle(post),
                                  // author: 'Ìé∏ÏßëÏû• ÍπÄÎ≥ëÍµ≠',
                                  author: post['editor'] ?? 'Ìé∏ÏßëÏû• ÍπÄÎ≥ëÍµ≠',
                                  category: post['category'],
                                  createdAt: post['date'] ?? post['createdAt'],
                                  status: post['status'] ?? 'Î∞úÌñâ',
                                  textColor: post['status'] == 'Î∞úÌñâ'
                                      ? AppColor.deepGreen
                                      : AppColor.black,
                                  color: post['status'] == 'Î∞úÌñâ'
                                      ? AppColor.green.withOpacity(0.2)
                                      : AppColor.lightGrey,
                                  onContentTap: () {
                                    // box.write('post', post);

                                    controller.openEditPage(post);
                                    print(
                                        'Ïñ¥ÎìúÎØº ÌéòÏù¥ÏßÄ Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${getDisplayTitle(post)}');
                                    print(
                                        'Ïñ¥ÎìúÎØº ÌéòÏù¥ÏßÄ Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${post['content']}');
                                    print(
                                        'Ïñ¥ÎìúÎØº ÌéòÏù¥ÏßÄ Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${post['category']}');
                                    print(
                                        'Ïñ¥ÎìúÎØº ÌéòÏù¥ÏßÄ Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${post['status']}');
                                    controller.isEditing.value =
                                        true; // üîπ Ìé∏Ïßë Î™®Îìú ON
 controller.originTabIndex!.value = controller.menuSelectedIndex.value;
                                    // print(
                                    //     'Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${box.read('post')['title']}');
                                    // print(
                                    //     'Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${box.read('post')['content']}');
                                    // print(
                                    //     'Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${box.read('post')['category']}');
                                    // print(
                                    //     'Ïûò Î∞õÏïÑÏò§ÎÇò?? : ${box.read('post')['status']}');

                                    // onContentTap: () => Get.toNamed(
                                    //     EditPage.route,
                                    //     arguments: post),
                                  },
                                  onDeleteTap: () {
                                    Get.dialog(
                                      AlertDialog(
                                        title: const Text('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú'),
                                        content:
                                            const Text('Ï†ïÎßêÎ°ú Ïù¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?'),
                                        actions: [
                                          TextButton(
                                            onPressed: () =>
                                                Get.back(), // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
                                            child: const Text('Ï∑®ÏÜå'),
                                          ),
                                          TextButton(
                                            onPressed: () {
                                              controller.deletePost(
                                                post['id'],
                                              );
                                              controller.fetchAllPosts();
                                              controller.fetchAllPostCounts();
                                              Get.back();
                                            },
                                            child: const Text('ÏÇ≠Ï†ú'),
                                          ),
                                        ],
                                      ),
                                    );
                                  },
                                  onTap: () {
                                    controller.openEditPage(post);
                                    controller.isEditing.value =
                                        true; // üîπ Ìé∏Ïßë Î™®Îìú ON
                                  },

                                  // onTap: () => Get.toNamed(EditPage.route,
                                  //     arguments: post),
                                ),
                              );
                            },
                          );
                        }),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
